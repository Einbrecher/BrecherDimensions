plugins {
    id "java"
    id "maven-publish"
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"

    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }
        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }
        maven {
            name = 'CurseMaven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }
        maven {
            name = 'Modrinth'
            url = 'https://api.modrinth.com/maven'
        }
        maven {
            name = 'Llamalad7'
            url = 'https://maven.llamalad7.dev/releases'
        }
    }
}

subprojects {
    apply plugin: "java"
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(Integer.parseInt(project.java_version))
        }
        withSourcesJar()
    }
    
    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${rootProject.mod_name}" }
        }
        manifest {
            attributes([
                "Specification-Title"     : rootProject.mod_name,
                "Specification-Vendor"    : rootProject.mod_author,
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : rootProject.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : rootProject.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Timestamp"               : System.currentTimeMillis(),
                "Built-On-Java"           : "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                "Built-On-Minecraft"      : rootProject.minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${rootProject.mod_name}" }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release = Integer.parseInt(project.java_version)
    }
}

// Clean up old build artifacts
task cleanAll {
    group = 'build'
    description = 'Clean all subproject build directories'
    dependsOn subprojects.collect { it.tasks.clean }
}

// Build all platforms
task buildAll {
    group = 'build'
    description = 'Build all platform JARs'
    dependsOn ':common:build', ':fabric:build', ':neoforge:build'
}