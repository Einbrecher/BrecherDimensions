plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    
    loom {
        silentMojangMappingsLicense()
        
        // Access wideners (for fabric and common)
        if (project.name != "neoforge") {
            accessWidenerPath = file("src/main/resources/${rootProject.mod_id}.accesswidener")
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // Using Parchment mappings for better parameter names
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }
    
    processResources {
        // Expand properties in resources
        var replaceProperties = [
                "minecraft_version": rootProject.minecraft_version,
                "architectury_version": rootProject.architectury_version,
                "mod_version": rootProject.mod_version,
                "mod_id": rootProject.mod_id,
                "mod_name": rootProject.mod_name,
                "mod_description": rootProject.mod_description,
                "mod_author": rootProject.mod_author,
                "mod_license": rootProject.mod_license
        ]
        inputs.properties replaceProperties

        filesMatching(["fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml", "pack.mcmeta"]) {
            expand replaceProperties
        }
    }
}